// const express = require("express");
// const morgan = require("morgan");
// const fs = require("fs");
// const path = require("path");
// const bodyParser = require("body-parser");
// const uuid = require("uuid");
// const mongoose = require("mongoose");
// const Models = require("./models.js");

// Express validator for validation 
// const {check, validationResult} = require("express-validator");

// Variable for routing HTTP requests
// const app = express(); 

// CORS
// const cors = require("cors");
// app.use(cors());

// Authentication (auth.js is handling login endpoint and generating JWT tokens)
// let auth = require("./auth")(app);

// const passport = require("passport");
//     require("./passport");

// const Movies = Models.Movie;
// const Users = Models.User;

// connects mongoose to db to perform CRUD operations 
// mongoose.connect("mongodb://127.0.0.1:27017/test", { 
//     useNewUrlParser: true,
//     useUnifiedTopology: true
// });

// // middleware functions
// app.use(bodyParser.json());
// app.use(bodyParser.urlencoded({ extended: true }));

// app.use(morgan("common"));

// // default text response when at  /
// app.get("/", (req, res) => {
//     res.send("This is my default route endpoint");
// });

// // return JSON object when at /movies
// // app.get("/movies", passport.authenticate("jwt", { session: false }), (req, res) => {
// //     Movies.find()
// //     .then((movies) => {
// //         res.status(201).json(movies);
// //     })
// //     .catch((err) => {
// //         console.error(err);
// //         res.status(500).send("Error: " + err);
// //     });
// // })

// app.get("/movies", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Movies.find()
//     .then(function (movies) {
//         res.status(201).json(movies);
//     })
//     .catch(function (err) {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// })


// // Get movie by title
// app.get("/movies/title/:Title", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Movies.findOne({ Title: req.params.Title })
//     .then((movie) => {
//         if (!movie) {
//             return res
//             .status(404)
//             .send("Error: " + req.params.Title + " was not found");
//         }
//         res.status(200).json(movie);
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// // GET movies by genre name
// app.get("/movies/genre/:Genre", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Movies.find({ "Genre.Name": req.params.Genre })
//     .then((movies) => {
//         if (movies.length == 0) {
//             return res
//             .status(404)
//             .send(
//                 "Error: no movies found with the " +
//                 req.params.Genre + " genre type."
//             );
//         } else {
//             res.status(200).json(movies);
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// // GET movies by director name
// app.get("/movies/director/:Director", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Movies.find({ "Director.Name": req.params.Director })
//     .then((movies) => {
//         if (movies.length == 0) {
//             return res
//             .status(404)
//             .send(
//                 "Error: no movies found with the director " +
//                 req.params.Director +
//                 " name"
//             );
//         } else {
//         res.status(200).json(movies);
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// // GET data about a genre by genre name
// app.get("/movies/genre_description/:Genre", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Movies.findOne({ "Genre.Name": req.params.Genre })
//     .then((movie) => {
//         if (!movie) {
//             return res
//             .status(404)
//             .send("Error: " + req.params.Genre + " was not found");
//         } else {
//             res.status(500).json(movie.Genre.Description);
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// // GET all users
// app.get("/users", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Users.find()
//     .then((users) => {
//        res.status(200).json(users);
//     })
//     .catch((error) => {
//         console.log(error);
//         res.status(500).send("Error: " + error);
//     });
//  });


// // GET a user by username
// app.get("/users/:Username", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Users.findOne({ Username: req.params.Username })
//         .then((user) => {
//             if (!user) {
//                 return res
//                 .status(404)
//                 .send("Error: " + req.params.Username + " was not found");
//             } else {
//                 res.json(user);
//             }
//         })
//         .catch((err) => {
//             console.error(err);
//             res.status(500).send("Error: " + err);
//         });
//     });

// Create a new user
// app.post("/users", [
//     check("Username", "Username is required").isLength({min: 5}),
//     check("Username", "Username contains non alphanumeric characters - not allowed").isAlphanumeric(),
//     check("Password", "Password is required").not().isEmpty(),
//     check("Email", "Email does not appear to be valid").isEmail()
// ], 
//     (req, res) => {
//         // Check validation object for errors
//         let errors = validationResult(req);

//         if (!errors.isEmpty()) {
//             return res.status(422).json({ errors: errors.array() });
//         }
    
//     let hashedPassword = Users.hashPassword(req.body.Password);
//     Users.findOne({ Username: req.body.Username }) // Searching to see if user already exists
//     .then((user) => {
//         if (user) {
//             return res.status(400).send(req.body.Username + " already exists");
//         } else {
//             Users.create({
//                 Username: req.body.Username,
//                 Password: hashedPassword,
//                 Email: req.body.Email,
//                 Birthday: req.body.Birthday,
//             })
//             .then((user) => {
//                 res.status(201).json(user);
//                 console.log("New user created.")
//             })
//             .catch((err) => {
//                 console.error(err);
//                 res.status(500).send("Error: " + err);
//             });
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// app.post("/users", (req, res) => {
//     Users.findOne({ Username: req.body.Username }) // Find a user in the database based on the provided Username from the request body
//         .then((user) => { // Execute the following code block if the user is found
//             if (user) { // If a user with the given Username already exists
//                 return res.status(400).send(req.body.Username + " already exists"); // Return a response with status 400 (Bad Request) and an error message
//             } else { // If the user doesn't exist
//                 Users.create({ // Create a new user in the database with the provided user information from the request body
//                     Username: req.body.Username,
//                     Password: req.body.Password,
//                     Email: req.body.Email,
//                     Birthday: req.body.Birthday,
//                 })
//                     .then((user) => { // Execute the following code block if the user is successfully created
//                         res.status(201).json(user); // Return a response with status 201 (Created) and the created user object in JSON format
//                     })
//                     .catch((error) => { // Catch any error that occurs during user creation
//                         console.error(error); // Log the error to the console
//                         res.status(500).send("Error: " + error); // Return a response with status 500 (Internal Server Error) and an error message
//                     });
//             }
//         })
//         .catch((error) => { // Catch any error that occurs during user retrieval
//             console.error(error); // Log the error to the console
//             res.status(500).send("Error: " + error); // Return a response with status 500 (Internal Server Error) and an error message
//         });
// });


// // Updating users favorite list
// app.post("/users/:Username/movies/:MovieID", passport.authenticate("jwt", { session: false }), (req, res) => {
//     return new Promise((resolve, reject) => {
//         Users.findOneAndUpdate({ Username: req.params.Username },
//             { $push: { FavoriteMovies: req.params.MovieID }},
//                 {
//                     new: true
//                 }) 
//                 .then(updatedUser => {
//                     resolve(res.json(updatedUser));
//                 }, err => {
              
//                     console.error(err);
//                     reject(res.status(500).send("Error" + err));
//                 })
//             });
//     });


// allow users to add movies to their favorites list
// app.post("/users/:Username/movies/:MovieID", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Users.findOneAndUpdate(
//         { Username: req.params.Username },
//         {
//             $addToSet: { FavoriteMovies: req.params.MovieID },
//         },
//         { new: true } 
//     )
//     .then((updatedUser) => {
//         if (!updatedUser) {
//             return res.status(404).send("Error: User was not found");
//         } else {
//             res.json(updatedUser);
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// Update a users data by username
// app.put("/users/:Username", passport.authenticate("jwt", { session: false }), (req, res) => {
//     return new Promise((resolve, reject) => {
//         Users.findOneAndUpdate({ Username: req.params.Username },
//             {
//                 $set: {
//                     Username: req.body.Username,
//                     Password: req.body.Password,
//                     Email: req.body.Email,
//                     Birthday: req.body.Birthday,
//                 },
//             },
//             {new: true }) // This line makes sure the updated document is returned
//             .then((updatedUser) => {
//                 resolve(res.json(updatedUser));
//             }, (err) => {
//                 console.error(err);
//                 reject(res.status(500).send("Error: " + err));
//             });
//         });
//     });

// app.put('/users/:Username', (req, res) => {
// 	Users.findOneAndUpdate(
// 		{ Username: req.params.Username },
// 		{
// 			$set: {
// 				Username: req.body.Username,
// 				Password: req.body.Password,
// 				Email: req.body.Email,
// 				Birthday: req.body.Birthday,
// 			},
// 		},
// 		{ new: true }
//     )
// 		.then((user) => {
// 			if (!user) {
// 				return res.status(404).send('Error: No user was found');
// 			} else {
// 				res.json(user);
// 			}
// 		})
// 		.catch((err) => {
// 			console.error(err);
// 			res.status(500).send('Error: ' + err);
// 		});
// });

// app.put(
//     "/users/:Username",
//     passport.authenticate("jwt", { session: false }),
//     (req, res) => {
//         Users.findOneAndUpdate(
//             { Username: req.params.Username },
//             {
//                 $set: {
//                     Username: req.body.Username,
//                     Password: req.body.Password,
//                     Email: req.body.Email,
//                     Birthday: req.body.Birthday,
//                 },
//             },
//             { new: true }, // This line makes sure that the updated document is returned
//             (err, updatedUser) => {
//                 if (err) {
//                     console.error(err);
//                     res.status(500).send("Error: " + err);
//                 } else {
//                     res.json(updatedUser);
//                 }
//             }
//         );
//     }
// );
                       

// // Remove a movie from their favorites list
// app.delete("/users/:Username/movies/:MovieID", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Users.findOneAndUpdate(
//         { Username: req.params.Username },
//         {
//             $pull: { FavoriteMovies: req.params.MovieID },
//         },
//         { new: true }
//     )
//     .then((updatedUser) => {
//         if (!updatedUser) {
//             return res.status(404).send("Error: User not found");
//         } else {
//             res.json(updatedUser);
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// // Delete users by username 
// app.delete("/users/:Username", passport.authenticate("jwt", { session: false }), (req, res) => {
//     Users.findOneAndUpdate({ Username: req.params.Username })
//     .then((user) => {
//         if (!user) {
//             res.status(404).send("Error: User was not found");
//         } else {
//             res.status(200).send(req.params.Username + " was deleted");
//         }
//     })
//     .catch((err) => {
//         console.error(err);
//         res.status(500).send("Error: " + err);
//     });
// });

// app.use((err, req, res, next) => {
//     console.log(err);
//     console.error(err.stack);
// });


// // Pre-configure port number
// const port = process.env.PORT || 8080;
// app.listen(port, "0.0.0.0",() => {
//     console.log("Listening on Port " + port);
// });



// app.listen(8080, (req, res) => {
//     console.log("myFlix is listening to port 8080.");
// });


// READ
// app.get("/movies", (req, res) => {
//     res.status(200).json(movies);
// })

// // READ
// app.get("/movies/:title", (req, res) => {
//     const { title } = req.params;
//     const movie = movies.find(movie => movie.Title === title);

//     if (movie) {
//         res.status(200).json(movie);
//     } else {
//         res.status(400).send("No such movie.");
//     }
// });

// // READ
// app.get("/movies/genre/:genreName", (req, res) => {
//     const { genreName } = req.params;
//     const genre = movies.find( movie => movie.Genre.Name === genreName ).Genre;

//     if (genre) {
//         res.status(200).json(genre);
//     } else {
//         res.status(400).send("No such genre.");
//     }
// });

// // READ
// app.get("/movies/directors/:directorName", (req, res) => {
//     const { directorName } = req.params;
//     const director = movies.find( movie => movie.Director.Name === directorName ).Director;

//     if (director) {
//         res.status(200).json(director);
//     } else {
//         res.status(400).send("No such director.");
//     }
// });

// creating a new user in db
// app.post("/users", (req, res) => {
//     const newUser = req.body;

//     if (newUser.name) {
//         newUser.id = uuid.v4();
//         users.push(newUser);
//         res.status(201).json(newUser);

//     } else {
//         res.status(400).send("User needs a name.");
//     }
// });


// UPDATE users id
// app.put("/users/:id", (req, res) => {
//     const { id } = req.params;
//     const updatedUser = req.body;

//     let user = users.find( user => user.id == id );

//     if (user) {
//         user.name = updatedUser.name;
//         res.status(200).json(user);
//     } else {
//         res.status(400).send("No such user.");
//     }
// });